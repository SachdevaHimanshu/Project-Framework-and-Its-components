There are three built-in build lifecycles:
1. build/default: The default lifecycle handles your project deployment. (23 phases)
2. clean: The clean lifecycle handles project cleaning (3 phases)
3. site: The site lifecycle handles the creation of your project's site documentation. (4 phases)

A life cycle is associated with sequence of phases and each phase will have Plugin and Plugin will be associated with one or more goals.
When we run a phase – all goals bound to this phase are executed in order.

Maven Build life Cycle.
Each phase is responsible for a specific task.

validate: check if all information necessary for the build is available
compile: compile the source code
test-compile: compile the test source code
test: run unit tests
package: package compiled source code into the distributable format (jar, war, …)
integration-test: process and deploy the package if needed to run integration tests
install: install the package to a local repository
deploy: copy the package to the remote repository

Phases are executed in a specific order. This means that if we run a specific phase using the command: mvn <PHASE>
This won't only execute the specified phase but all the preceding phases as well.
For example, if we run the deploy phase – which is the last phase in the default build lifecycle – that will execute all phases before the deploy phase as well, 
which is the entire default lifecycle: mvn deploy

Here are some of the phases and default goals bound to them:

compiler:compile – the compile goal from the compiler plugin is bound to the compile phase
compiler:testCompile is bound to the test-compile phase
surefire:test is bound to test phase
install:install is bound to install phase
jar:jar and war:war is bound to package phase
We can list all goals bound to a specific phase and their plugins using the command:
mvn help:describe -Dcmd=PHASENAME
For example, to list all goals bound to the compile phase, we can run:
mvn help:describe -Dcmd=compile



